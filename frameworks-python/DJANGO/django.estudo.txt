----------------------------------------- DJANGO --------------------------------------------------

framework (meio que uma caixa de ferramenta, lembrando que frameworks são focados no desenvolvimento em si do projeto, e não detalhes de configuração) do Python
o framework Django tem como foco no desenvolvimento como sites de noticias, blogs e foruns.
Django provê uma estrutura para mexermos no BD.
Django dispõe facilidade nas construção de operações CRUD (de GET, POST, DELETE, etc)

# Por que escolher Django?
Django tem uma sintaxe simples
Django tem ORM (não precisamos digitar codigos de BD, o Django consegue ir até o BD e trazer dados) nativo
DJango tem interface de admin, la podemos editar e atualizar nossos conteudos
Django tem propriedades de segurança
E vem comm uma estrutura 
---------------------------------------------------------------------------------------------------------

venv: É o ambiente virtual “padrão” do Python e sua grande vantagem é já vir instalado como um módulo na linguagem a partir da versão 3.3. Se trata de um subset (parte menor) da ferramenta virtualenv.
Virtualenv: É uma ferramenta feita especificamente para a criação de ambientes virtuais e precede a criação da venv, sendo um superset (parte maior) dela. Algumas de sua principais vantagens sobre a venv são:
Maior velocidade, graças ao método app-data seed;
Pode criar ambientes virtuais para versões arbitrárias do Python instaladas na máquina;
Pode ser atualizado utilizando a ferramenta pip;
Possui uma Programmatic API, capaz de descrever um ambiente virtual sem criá-lo.
Conda: É uma alternativa não apenas às ferramentas de ambiente virtuais já citadas, mas ao instalador de pacotes pip também. Possui um escopo mais centrado na área de ciência de dados e possui a capacidade de instalar pacotes fora do ecossistema do Python.
Virtualenvwrapper: É uma extensão do projeto Virtualenv que torna a criação, deleção e gerenciamento geral dos ambientes virtuais mais fácil. Uma grande vantagem de sua utilização é a organização de todos os ambientes virtuais utilizados em um só lugar, além de facilitar os comandos de CLI.
Poetry: É uma ferramenta para gerenciamento de dependências e pacotes do Python. Através do Poetry é possível declarar quais pacotes um projeto necessita para funcionar, de forma parecida ao requirements.txt, porém, de forma determinística.

---------------------------------------------------------------------------------------------------------

pastas e arquivo da estrutura do framework DJANGO ->

o arquivo manage.py é onde podemos rodar e gerenciar os comandos do Django 

no arquivo 

os arquivos asgi.py e o wsgi.py é para nós fazermos o deploy, para nosso servidor rodar
setting.py tem as configurações bases do nosso projeto, nela tem chave de segurança e muitas outras coisas que gerencia nosso projeto

ao dar o comando "python3 manage.py startapp nomedapasta" se cria outros arquivos nesta pasta:


models.py representa nossa camada de banco de dados
amdin.py é uma área administrativa, onde o Django trás para nós soluções administrativas
a logica do nosso projeto fica no arquivo views.py
--------------------------------------------------------------------------------------------------------
Um exemplo muito bom e importante, quando o usuario vai enviar dados por meio dos inputs, nos recebemos a informação passada por meio da URL ou por meio do proprio fomrulario da pessoa
e pra isso se usa uma função jno django

para pegar o que o usuario passou na URL

na pasta views.py -> nome = request.GET['nome']
			   print(nome)
			   return render(request, 'login/login.html')

E com formularios para a pessoa digitar alguma coisa:
